import re

from sqlalchemy.sql import compiler


class IAccessCompiler(compiler.SQLCompiler):
    def default_from(self):
        return " from sysibm.sysdummy1"

    def visit_empty_set_expr(self, element_types):
        # noinspection SqlConstantCondition
        return ' '.join(['SELECT 1', self.default_from(), 'WHERE 1!=1'])


class IAccessDDLCompiler(compiler.DDLCompiler):
    def visit_create_table(self, create):
        ddl = super().visit_create_table(create)

        # IBM supports `DECLARE GLOBAL TEMPORARY TABLE` instead of `CREATE GLOBAL TEMPORARY TABLE`
        if re.match('\W*CREATE GLOBAL TEMPORARY', ddl):
            ddl = ddl.replace('CREATE GLOBAL', 'DECLARE GLOBAL', 1)
        return ddl

    def get_column_specification(self, column, **kwargs):
        colspec = (
            self.preparer.format_column(column)
            + " "
            + self.dialect.type_compiler.process(
                column.type, type_expression=column
            )
        )

        system_name = kwargs.get('system_name', None)
        if system_name is not None:
            colspec += " FOR COLUMN " + system_name

        default = self.get_column_default_string(column)
        if default is not None:
            colspec += " DEFAULT " + default

        if column.computed is not None:
            colspec += " " + self.process(column.computed)

        if (
            column.table is not None
            and column is column.table._autoincrement_column
            and column.server_default is None
        ):
            colspec += " GENERATED BY DEFAULT AS IDENTITY "

        implicitly_hidden = kwargs.get('implicitly_hidden', None)
        if implicitly_hidden is not None:
            colspec += " IMPLICITLY HIDDEN"

        if not column.nullable:
            colspec += " NOT NULL"
        return colspec


class IAccessTypeCompiler(compiler.GenericTypeCompiler):
    def visit_boolean(self, type_, **kw):
        return self.visit_SMALLINT(type_, **kw)


class IAccessIdentifierPreparer(compiler.IdentifierPreparer):
    pass
